<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2016 Seoul National University

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>edu.snu.cay</groupId>
    <artifactId>cay</artifactId>
    <version>0.1-SNAPSHOT</version>
    <relativePath>../../</relativePath>
  </parent>
  <artifactId>dolphin-async</artifactId>
  <name>Dolphin Async</name>

  <repositories>
    <repository>
      <id>in-project</id>
      <name>In Project Repo</name>
      <url>file://${project.basedir}/lib</url>
      <releases>
        <enabled>true</enabled>
        <checksumPolicy>ignore</checksumPolicy>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>org.bytedeco.javacpp-presets</groupId>
      <artifactId>tensorflow</artifactId>
      <version>0.11.0-1.3-SNAPSHOT</version>
    </dependency>
  <dependency>
      <groupId>org.apache.reef</groupId>
      <artifactId>reef-common</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.reef</groupId>
      <artifactId>reef-io</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.reef</groupId>
      <artifactId>reef-runtime-local</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.reef</groupId>
      <artifactId>reef-runtime-yarn</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.reef</groupId>
      <artifactId>tang</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.reef</groupId>
      <artifactId>wake</artifactId>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4</artifactId>
      <version>${powermock.version}</version>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-mockito</artifactId>
      <version>${powermock.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-mapreduce-client-core</artifactId>
    </dependency>
    <dependency>
      <groupId>${project.parent.groupId}.services</groupId>
      <artifactId>evaluator-manager</artifactId>
      <version>${project.parent.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.parent.groupId}.services</groupId>
      <artifactId>ps</artifactId>
      <version>${project.parent.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.parent.groupId}</groupId>
      <artifactId>cay-common</artifactId>
      <version>${project.parent.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.parent.groupId}.services</groupId>
      <artifactId>elastic-memory</artifactId>
      <version>${project.parent.version}</version>
    </dependency>
    <dependency>
      <groupId>org.jblas</groupId>
      <artifactId>jblas</artifactId>
    </dependency>
    <dependency>
      <groupId>org.bytedeco</groupId>
      <artifactId>javacpp</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpasyncclient</artifactId>
      <version>4.1.2</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.4.0</version>
        <executions>
          <execution>
            <id>javacpp.cppbuild.install</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <arguments>
                <argument>${project.basedir}/src/main/cpp/cppbuild.sh</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <skip>${javacpp.cppbuild.skip}</skip>
          <workingDirectory>${project.basedir}/src/main/cpp</workingDirectory>
          <executable>bash</executable>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.bytedeco</groupId>
        <artifactId>javacpp</artifactId>
        <version>${javacpp.version}</version>
        <configuration>
          <classPath>${project.build.outputDirectory}</classPath>
          <includePaths>
            <includePath>${project.basedir}/src/main/cpp/include/</includePath>
            <includePath>/usr/local/cuda/include</includePath>
            <includePath>/usr/include/boost</includePath>
          </includePaths>
          <linkPaths>
            <linkPath>${project.basedir}/src/main/cpp/lib/</linkPath>
            <linkPath>/usr/local/cuda/lib64/</linkPath>
            <linkPath>/usr/lib/x86_64-linux-gnu</linkPath>
          </linkPaths>
          <copyLibs>true</copyLibs>
        </configuration>
        <executions>
          <execution>
            <id>javacpp.compiler</id>
            <phase>process-classes</phase>
            <goals>
              <goal>build</goal>
            </goals>
            <configuration>
              <skip>${javacpp.compiler.skip}</skip>
              <classOrPackageNames>
                <classOrPackageName>edu.snu.cay.dolphin.async.dnn.blas.cuda.JavaCuda</classOrPackageName>
                <classOrPackageName>edu.snu.cay.dolphin.async.dnn.layers.cuda.JavaCudnn</classOrPackageName>
              </classOrPackageNames>
              <copyLibs>true</copyLibs>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>schema</goal>
            </goals>
            <configuration>
              <sourceDirectory>${project.basedir}/src/main/avro/</sourceDirectory>
              <outputDirectory>${project.basedir}/target/generated-sources/avro/</outputDirectory>
              <imports>
                <import>${project.parent.basedir}/common/src/main/avro/metric.avsc</import>
                <import>${project.parent.basedir}/utils/src/main/avro/traceinfo.avsc</import>
                <import>${project.parent.basedir}/services/ps/src/main/avro/parameterserver.avsc</import>
              </imports>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.basedir}/target/generated-sources/avro/</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-sources</id>
            <phase>generate-sources</phase>
            <configuration>
              <tasks>
                <mkdir dir="target/generated-sources/proto"/>
                <exec executable="protoc">
                  <arg value="--proto_path=src/main/proto/"/>
                  <arg value="--java_out=target/generated-sources/proto"/>
                  <arg value="src/main/proto/neural_network.proto"/>
                </exec>
              </tasks>
              <sourceRoot>${project.basedir}/target/generated-sources/proto</sourceRoot>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>write-project-properties</goal>
            </goals>
            <configuration>
              <outputFile>${project.build.testOutputDirectory}/dolphin-async.properties</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.0.0</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>src/main/cpp</directory>
              <includes>
                <include>CMakeCache.txt</include>
                <include>CmakeFiles/**</include>
                <include>cmake_install.cmake</include>
                <include>lib/**</include>
              </includes>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <properties>
    <gpu>false</gpu>  <!-- -Dgpu=true for gpu support -->
    <javacpp.cppbuild.skip>true</javacpp.cppbuild.skip>
    <javacpp.compiler.skip>true</javacpp.compiler.skip>
  </properties>

  <profiles>
    <profile>
      <id>exclude_gpu</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <executions>
              <execution>
                <id>default-testCompile</id>
                <phase>test-compile</phase>
                <configuration>
                  <testExcludes>
                    <exclude>edu/snu/cay/dolphin/async/dnn/layers/cuda/*.java</exclude>
                  </testExcludes>
                </configuration>
                <goals>
                  <goal>testCompile</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>include_gpu</id>
      <activation>
        <property>
          <name>gpu</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <javacpp.cppbuild.skip>false</javacpp.cppbuild.skip>
        <javacpp.compiler.skip>false</javacpp.compiler.skip>
      </properties>
    </profile>
  </profiles>

</project>
