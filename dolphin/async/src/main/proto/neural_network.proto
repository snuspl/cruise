/*
 * Copyright (C) 2016 Seoul National University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
option java_package = "edu.snu.cay.dolphin.async.dnn.proto";
option java_outer_classname = "NeuralNetworkProtos";

message FullyConnectedLayerConfiguration {
  required float init_bias = 1;
  required float init_weight = 2;
  required uint32 num_output = 3;
}

message ConvolutionalLayerConfiguration {
  required uint32 kernel_height = 1;
  required uint32 kernel_width = 2;
  optional uint32 padding_height = 3 [default = 0];
  optional uint32 padding_width = 4 [default = 0];
  optional uint32 stride_height = 5 [default = 1];
  optional uint32 stride_width = 6 [default = 1];
  required float init_bias = 7;
  required float init_weight = 8;
  required uint32 num_output = 9;
}

message PoolingLayerConfiguration {
  required uint32 kernel_height = 1;
  required uint32 kernel_width = 2;
  optional uint32 padding_height = 3 [default = 0];
  optional uint32 padding_width = 4 [default = 0];
  optional uint32 stride_height = 5 [default = 1];
  optional uint32 stride_width = 6 [default = 1];
  optional string pooling_type = 7 [default = "MAX"];
}

message ActivationLayerConfiguration {
  required string activation_function = 1;
}

message ActivationWithLossLayerConfiguration {
  required string activation_function = 1;
  required string loss_function = 2;
}

message DropoutLayerConfiguration {
  optional float dropout_ratio = 1 [default = 0.5];
}

message LRNLayerConfiguration {
  optional uint32 local_size = 1 [default = 5];
  optional float alpha = 2 [default = 1];
  optional float beta = 3 [default = 0.75];
  optional float k = 4 [default = 1];
}

message LayerConfiguration {
  required string type = 1;
  optional FullyConnectedLayerConfiguration fully_connected_param = 2;
  optional ActivationLayerConfiguration activation_param = 3;
  optional ActivationWithLossLayerConfiguration activation_with_loss_param = 4;
  optional PoolingLayerConfiguration pooling_param = 5;
  optional ConvolutionalLayerConfiguration convolutional_param = 6;
  optional DropoutLayerConfiguration dropout_param = 7;
  optional LRNLayerConfiguration lrn_param = 8;
}

message Shape {
  repeated uint32 dim = 1 [packed = true];
}

message NeuralNetworkConfiguration {
  repeated LayerConfiguration layer = 1;
  optional uint32 batch_size = 2;
  optional float step_size = 3;
  required Shape input_shape = 4;
  optional uint32 random_seed = 5;
  enum DeviceMode {
    CPU = 0;
    GPU = 0;
  }
  optional DeviceMode device_mode = 6 [default = CPU];
}
