/*
 * Copyright (C) 2016 Seoul National University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
[
/**
 * A message containing worker-side metrics and other Task-specific information.
 */
{
  "namespace": "edu.snu.cay.dolphin.async.metric.avro",
  "type": "record",
  "name": "WorkerMetrics",
  "fields":
  [
    // Metrics should not be at the end of fields, since AvroUtils fails to decode the message.
    // "metrics" should contain app-specific metrics. (ex. loss, DvT)
    {"name": "metrics", "type": ["null", "edu.snu.cay.common.metric.avro.Metrics"], "default": null},

    // Parameter worker metrics containing pull/push request time split into multiple components (ex. encode time).
    {"name": "parameterWorkerMetrics", "type": ["null", "edu.snu.cay.dolphin.async.metric.avro.ParameterWorkerMetrics"],
     "default":null},

    // epoch index
    {"name": "epochIdx", "type": "int", "default": 0},

    // mini-batch index
    {"name": "miniBatchIdx", "type": "int", "default": 0},

    // number of data blocks used for MemoryStore
    {"name": "numDataBlocks", "type": "int", "default": 0},

    // number of data items (mapped to a key in MemoryStore) processed
    {"name": "processedDataItemCount", "type": "int", "default": 0},

    // number of training data instances processed per mini-batch
    {"name": "miniBatchSize", "type": "int", "default": 0},

    // number of mini-batches for this epoch
    {"name": "numMiniBatchForEpoch", "type": "int", "default": 0},

    // total elapsed time for this epoch (seconds)
    {"name": "totalTime", "type": "double", "default": 0.0},

    // total computation time for this epoch (seconds)
    {"name": "totalCompTime", "type": "double", "default": 0.0},

    // total push time for this epoch (seconds)
    {"name": "totalPushTime", "type": "double", "default": 0.0},

    // total pull time for this epoch (seconds)
    {"name": "totalPullTime", "type": "double", "default": 0.0},

    // average push time per trace/element for this epoch (seconds)
    {"name": "avgPushTime", "type": "double", "default": 0.0},

    // average pull time per trace/element for this epoch (seconds)
    {"name": "avgPullTime", "type": "double", "default": 0.0}
  ]
}
]
