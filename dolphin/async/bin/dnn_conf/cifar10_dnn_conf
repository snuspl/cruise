# Copyright (C) 2016 Seoul National University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# name: "cifar10_dnn_conf"
# description: neural network configuration for processed(by dnn_data/cifar-10/cifar10_process.py) cifar10 data.
# See http://www.cs.toronto.edu/~kriz/cifar.html.
# This net conf is referenced from https://github.com/BVLC/caffe/blob/master/examples/cifar10/cifar10_full.prototxt.
# LRN layer is a little bit different with caffe version, we use ACROSS_CHANNELS instead of WITHIN_CHANNEL.

batch_size: 100
step_size: 0.001
input_shape {
  dim: 3
  dim: 32
  dim: 32
}
device_mode: CPU
layer {
  type: "Convolutional"
  convolutional_param {
    kernel_height: 5
    kernel_width: 5
    padding_height: 2
    padding_width: 2
    stride_height: 1
    stride_width: 1
    init_weight: 0.01
    init_bias: 0
    num_output: 32
  }
}
layer {
  type: "Pooling"
  pooling_param {
    pooling_type: "MAX"
    kernel_height: 3
    kernel_width: 3
    stride_height: 2
    stride_width: 2
  }
}
layer {
  type: "Activation"
  activation_param {
    activation_function: "relu"
  }
}
layer {
  type: "LRN"
  lrn_param {
    local_size: 3
    alpha: 5e-05
    beta: 0.75
    k: 1
  }
}
layer {
  type: "Convolutional"
  convolutional_param {
    kernel_height: 5
    kernel_width: 5
    padding_height: 2
    padding_width: 2
    stride_height: 1
    stride_width: 1
    init_weight: 0.01
    init_bias: 0
    num_output: 32
  }
}
layer {
  type: "Activation"
  activation_param {
    activation_function: "relu"
  }
}
layer {
  type: "Pooling"
  pooling_param {
    pooling_type: "AVERAGE"
    kernel_height: 3
    kernel_width: 3
    stride_height: 2
    stride_width: 2
  }
}
layer {
  type: "LRN"
  lrn_param {
    local_size: 3
    alpha: 5e-05
    beta: 0.75
    k: 1
  }
}
layer {
  type: "Convolutional"
  convolutional_param {
    kernel_height: 5
    kernel_width: 5
    padding_height: 2
    padding_width: 2
    stride_height: 1
    stride_width: 1
    init_weight: 0.01
    init_bias: 0
    num_output: 64
  }
}
layer {
  type: "Activation"
  activation_param {
    activation_function: "relu"
  }
}
layer {
  type: "Pooling"
  pooling_param {
    pooling_type: "AVERAGE"
    kernel_height: 3
    kernel_width: 3
    stride_height: 2
    stride_width: 2
  }
}
layer {
  type: "FullyConnected"
  fully_connected_param {
    init_weight: 0.005
    init_bias: 0.1
    num_output: 10
  }
}
layer {
  type: "ActivationWithLoss"
  activation_with_loss_param {
    activation_function: "softmax"
    loss_function: "crossEntropy"
  }
}
