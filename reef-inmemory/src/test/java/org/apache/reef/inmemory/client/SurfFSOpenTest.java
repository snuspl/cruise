package org.apache.reef.inmemory.client;

import com.google.common.base.Strings;
import com.microsoft.reef.client.DriverLauncher;
import com.microsoft.reef.client.REEF;
import com.microsoft.reef.runtime.common.client.REEFImplementation;
import com.microsoft.reef.runtime.local.client.LocalRuntimeConfiguration;
import com.microsoft.tang.JavaConfigurationBuilder;
import com.microsoft.tang.Tang;
import com.microsoft.tang.exceptions.InjectionException;
import com.microsoft.tang.formats.ConfigurationModuleBuilder;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.hdfs.DFSConfigKeys;
import org.apache.hadoop.hdfs.HdfsConfiguration;
import org.apache.hadoop.hdfs.MiniDFSCluster;
import org.apache.reef.inmemory.Launch;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.IOException;
import java.net.URI;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

/**
 * Tests for SurfFS methods that delegate to a Base FS.
 * The tests use HDFS as the Base FS, by connecting to a base HDFS minicluster
 */
public final class SurfFSOpenTest {

  private static MiniDFSCluster cluster;
  private static FileSystem baseFs;
  private static SurfFS surfFs;

  private static REEF reef;

  private static final String TESTDIR = "/user/"+System.getProperty("user.name");

  private static final String SURF = "surf";
  private static final String SURF_ADDRESS = "localhost:9001";

  private static void configureReef() {

  }

  /**
   * Setup test environment once, since it's expensive.
   * Don't run destructive tests on the elements created here.
   */
  @BeforeClass
  public static void setUpClass() throws IOException, InjectionException {
    Configuration hdfsConfig = new HdfsConfiguration();
    hdfsConfig.setInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3);
    // Set blocksize to 64 bytes, to test multiple blocks
    hdfsConfig.setInt(DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY, 512);
    hdfsConfig.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, 512);

    cluster = new MiniDFSCluster.Builder(hdfsConfig).numDataNodes(3).build();
    cluster.waitActive();

    baseFs = cluster.getFileSystem();
    baseFs.mkdirs(new Path(TESTDIR));

    // TODO: this has to be tested end-to-end: run actual instances of SurfFs -> Make Launch testable
    com.microsoft.tang.Configuration runtimeConf = LocalRuntimeConfiguration.CONF
            .set(LocalRuntimeConfiguration.NUMBER_OF_THREADS, 2)
            .build();
    com.microsoft.tang.Configuration clConf = Launch.parseCommandLine(new String[]{"-dfs_address", baseFs.getUri().toString()});
    reef = Launch.runInMemory(runtimeConf, clConf);

    try {
      Thread.sleep(5000); // Wait for reef setup before continuing
    } catch (InterruptedException e) {
      e.printStackTrace();
    }

    Configuration conf = new Configuration();
    conf.set(SurfFS.BASE_FS_ADDRESS_KEY, baseFs.getUri().toString());

    surfFs = new SurfFS();
    surfFs.initialize(URI.create(SURF+"://"+SURF_ADDRESS), conf);
  }

  @AfterClass
  public static void cleanUpClass() {
    System.out.println("Closing REEF...");
    reef.close(); // TODO: does not kill Launchers -- for now, remember to kill from command line
  }

  @Test
  public void testReadSingleBlock() throws IOException {
    String path = TESTDIR+"/"+"README.short";

    FSDataOutputStream stream = baseFs.create(new Path(path));
    stream.writeUTF("Hello Readme");
    stream.close();

    for (int i = 0; i < 2; i++) { // TODO: This is done because right now there's no way for Task to indicate "loading" status
      try {
        FSDataInputStream in = surfFs.open(new Path(path));
        String utf = in.readUTF();
        assertEquals("Hello Readme", utf);
      } catch (IOException e) {
        System.out.println("Attempt failed");
        assertNotEquals("Failed a couple attempts", 1, i);
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e1) {
          e1.printStackTrace();
        }
      }
    }
  }

  @Test
  public void testReadMultipleBlocks() throws IOException {
    String path = TESTDIR+"/"+"README.long";
    String content = Strings.repeat("12345678", 70); // Two blocks

    FSDataOutputStream stream = baseFs.create(new Path(path));
    stream.writeUTF(content);
    stream.close();

    for (int i = 0; i < 2; i++) { // TODO: This is done because right now there's no way for Task to indicate "loading" status
      try {
        FSDataInputStream in = surfFs.open(new Path(path));
        String utf = in.readUTF();
        assertEquals(content, utf);
      } catch (IOException e) {
        System.out.println("Attempt failed: "+e);
        assertNotEquals("Failed a couple attempts", 1, i);
        try {
          Thread.sleep(2000);
        } catch (InterruptedException e1) {
          e1.printStackTrace();
        }
      }
    }
  }
}
