/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.reef.inmemory.fs.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FileMeta implements org.apache.thrift.TBase<FileMeta, FileMeta._Fields>, java.io.Serializable, Cloneable, Comparable<FileMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileMeta");

  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FULL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("fullPath", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSize", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CREATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("creationTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DIRECTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("directory", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField BLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("blocks", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField COMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("complete", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileMetaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileMetaTupleSchemeFactory());
  }

  private long fileId; // required
  private String fileName; // required
  private String fullPath; // required
  private long fileSize; // required
  private long blockSize; // required
  private long creationTime; // required
  private boolean directory; // required
  private List<BlockInfo> blocks; // required
  private boolean complete; // required
  private User owner; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_ID((short)1, "fileId"),
    FILE_NAME((short)2, "fileName"),
    FULL_PATH((short)3, "fullPath"),
    FILE_SIZE((short)4, "fileSize"),
    BLOCK_SIZE((short)5, "blockSize"),
    CREATION_TIME((short)6, "creationTime"),
    DIRECTORY((short)7, "directory"),
    BLOCKS((short)8, "blocks"),
    COMPLETE((short)9, "complete"),
    OWNER((short)10, "owner");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_ID
          return FILE_ID;
        case 2: // FILE_NAME
          return FILE_NAME;
        case 3: // FULL_PATH
          return FULL_PATH;
        case 4: // FILE_SIZE
          return FILE_SIZE;
        case 5: // BLOCK_SIZE
          return BLOCK_SIZE;
        case 6: // CREATION_TIME
          return CREATION_TIME;
        case 7: // DIRECTORY
          return DIRECTORY;
        case 8: // BLOCKS
          return BLOCKS;
        case 9: // COMPLETE
          return COMPLETE;
        case 10: // OWNER
          return OWNER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILEID_ISSET_ID = 0;
  private static final int __FILESIZE_ISSET_ID = 1;
  private static final int __BLOCKSIZE_ISSET_ID = 2;
  private static final int __CREATIONTIME_ISSET_ID = 3;
  private static final int __DIRECTORY_ISSET_ID = 4;
  private static final int __COMPLETE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FULL_PATH, new org.apache.thrift.meta_data.FieldMetaData("fullPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("blockSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("creationTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DIRECTORY, new org.apache.thrift.meta_data.FieldMetaData("directory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BLOCKS, new org.apache.thrift.meta_data.FieldMetaData("blocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlockInfo.class))));
    tmpMap.put(_Fields.COMPLETE, new org.apache.thrift.meta_data.FieldMetaData("complete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileMeta.class, metaDataMap);
  }

  public FileMeta() {
  }

  public FileMeta(
    long fileId,
    String fileName,
    String fullPath,
    long fileSize,
    long blockSize,
    long creationTime,
    boolean directory,
    List<BlockInfo> blocks,
    boolean complete,
    User owner)
  {
    this();
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.fileName = fileName;
    this.fullPath = fullPath;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.blockSize = blockSize;
    setBlockSizeIsSet(true);
    this.creationTime = creationTime;
    setCreationTimeIsSet(true);
    this.directory = directory;
    setDirectoryIsSet(true);
    this.blocks = blocks;
    this.complete = complete;
    setCompleteIsSet(true);
    this.owner = owner;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileMeta(FileMeta other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fileId = other.fileId;
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetFullPath()) {
      this.fullPath = other.fullPath;
    }
    this.fileSize = other.fileSize;
    this.blockSize = other.blockSize;
    this.creationTime = other.creationTime;
    this.directory = other.directory;
    if (other.isSetBlocks()) {
      List<BlockInfo> __this__blocks = new ArrayList<BlockInfo>(other.blocks.size());
      for (BlockInfo other_element : other.blocks) {
        __this__blocks.add(new BlockInfo(other_element));
      }
      this.blocks = __this__blocks;
    }
    this.complete = other.complete;
    if (other.isSetOwner()) {
      this.owner = new User(other.owner);
    }
  }

  public FileMeta deepCopy() {
    return new FileMeta(this);
  }

  @Override
  public void clear() {
    setFileIdIsSet(false);
    this.fileId = 0;
    this.fileName = null;
    this.fullPath = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    setBlockSizeIsSet(false);
    this.blockSize = 0;
    setCreationTimeIsSet(false);
    this.creationTime = 0;
    setDirectoryIsSet(false);
    this.directory = false;
    this.blocks = null;
    setCompleteIsSet(false);
    this.complete = false;
    this.owner = null;
  }

  public long getFileId() {
    return this.fileId;
  }

  public void setFileId(long fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public String getFileName() {
    return this.fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public String getFullPath() {
    return this.fullPath;
  }

  public void setFullPath(String fullPath) {
    this.fullPath = fullPath;
  }

  public void unsetFullPath() {
    this.fullPath = null;
  }

  /** Returns true if field fullPath is set (has been assigned a value) and false otherwise */
  public boolean isSetFullPath() {
    return this.fullPath != null;
  }

  public void setFullPathIsSet(boolean value) {
    if (!value) {
      this.fullPath = null;
    }
  }

  public long getFileSize() {
    return this.fileSize;
  }

  public void setFileSize(long fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public long getBlockSize() {
    return this.blockSize;
  }

  public void setBlockSize(long blockSize) {
    this.blockSize = blockSize;
    setBlockSizeIsSet(true);
  }

  public void unsetBlockSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  /** Returns true if field blockSize is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockSize() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  public void setBlockSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID, value);
  }

  public long getCreationTime() {
    return this.creationTime;
  }

  public void setCreationTime(long creationTime) {
    this.creationTime = creationTime;
    setCreationTimeIsSet(true);
  }

  public void unsetCreationTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIONTIME_ISSET_ID);
  }

  /** Returns true if field creationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIONTIME_ISSET_ID);
  }

  public void setCreationTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIONTIME_ISSET_ID, value);
  }

  public boolean isDirectory() {
    return this.directory;
  }

  public void setDirectory(boolean directory) {
    this.directory = directory;
    setDirectoryIsSet(true);
  }

  public void unsetDirectory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECTORY_ISSET_ID);
  }

  /** Returns true if field directory is set (has been assigned a value) and false otherwise */
  public boolean isSetDirectory() {
    return EncodingUtils.testBit(__isset_bitfield, __DIRECTORY_ISSET_ID);
  }

  public void setDirectoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECTORY_ISSET_ID, value);
  }

  public int getBlocksSize() {
    return (this.blocks == null) ? 0 : this.blocks.size();
  }

  public java.util.Iterator<BlockInfo> getBlocksIterator() {
    return (this.blocks == null) ? null : this.blocks.iterator();
  }

  public void addToBlocks(BlockInfo elem) {
    if (this.blocks == null) {
      this.blocks = new ArrayList<BlockInfo>();
    }
    this.blocks.add(elem);
  }

  public List<BlockInfo> getBlocks() {
    return this.blocks;
  }

  public void setBlocks(List<BlockInfo> blocks) {
    this.blocks = blocks;
  }

  public void unsetBlocks() {
    this.blocks = null;
  }

  /** Returns true if field blocks is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocks() {
    return this.blocks != null;
  }

  public void setBlocksIsSet(boolean value) {
    if (!value) {
      this.blocks = null;
    }
  }

  public boolean isComplete() {
    return this.complete;
  }

  public void setComplete(boolean complete) {
    this.complete = complete;
    setCompleteIsSet(true);
  }

  public void unsetComplete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETE_ISSET_ID);
  }

  /** Returns true if field complete is set (has been assigned a value) and false otherwise */
  public boolean isSetComplete() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETE_ISSET_ID);
  }

  public void setCompleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETE_ISSET_ID, value);
  }

  public User getOwner() {
    return this.owner;
  }

  public void setOwner(User owner) {
    this.owner = owner;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Long)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case FULL_PATH:
      if (value == null) {
        unsetFullPath();
      } else {
        setFullPath((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Long)value);
      }
      break;

    case BLOCK_SIZE:
      if (value == null) {
        unsetBlockSize();
      } else {
        setBlockSize((Long)value);
      }
      break;

    case CREATION_TIME:
      if (value == null) {
        unsetCreationTime();
      } else {
        setCreationTime((Long)value);
      }
      break;

    case DIRECTORY:
      if (value == null) {
        unsetDirectory();
      } else {
        setDirectory((Boolean)value);
      }
      break;

    case BLOCKS:
      if (value == null) {
        unsetBlocks();
      } else {
        setBlocks((List<BlockInfo>)value);
      }
      break;

    case COMPLETE:
      if (value == null) {
        unsetComplete();
      } else {
        setComplete((Boolean)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((User)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_ID:
      return Long.valueOf(getFileId());

    case FILE_NAME:
      return getFileName();

    case FULL_PATH:
      return getFullPath();

    case FILE_SIZE:
      return Long.valueOf(getFileSize());

    case BLOCK_SIZE:
      return Long.valueOf(getBlockSize());

    case CREATION_TIME:
      return Long.valueOf(getCreationTime());

    case DIRECTORY:
      return Boolean.valueOf(isDirectory());

    case BLOCKS:
      return getBlocks();

    case COMPLETE:
      return Boolean.valueOf(isComplete());

    case OWNER:
      return getOwner();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_ID:
      return isSetFileId();
    case FILE_NAME:
      return isSetFileName();
    case FULL_PATH:
      return isSetFullPath();
    case FILE_SIZE:
      return isSetFileSize();
    case BLOCK_SIZE:
      return isSetBlockSize();
    case CREATION_TIME:
      return isSetCreationTime();
    case DIRECTORY:
      return isSetDirectory();
    case BLOCKS:
      return isSetBlocks();
    case COMPLETE:
      return isSetComplete();
    case OWNER:
      return isSetOwner();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileMeta)
      return this.equals((FileMeta)that);
    return false;
  }

  public boolean equals(FileMeta that) {
    if (that == null)
      return false;

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_fullPath = true && this.isSetFullPath();
    boolean that_present_fullPath = true && that.isSetFullPath();
    if (this_present_fullPath || that_present_fullPath) {
      if (!(this_present_fullPath && that_present_fullPath))
        return false;
      if (!this.fullPath.equals(that.fullPath))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_blockSize = true;
    boolean that_present_blockSize = true;
    if (this_present_blockSize || that_present_blockSize) {
      if (!(this_present_blockSize && that_present_blockSize))
        return false;
      if (this.blockSize != that.blockSize)
        return false;
    }

    boolean this_present_creationTime = true;
    boolean that_present_creationTime = true;
    if (this_present_creationTime || that_present_creationTime) {
      if (!(this_present_creationTime && that_present_creationTime))
        return false;
      if (this.creationTime != that.creationTime)
        return false;
    }

    boolean this_present_directory = true;
    boolean that_present_directory = true;
    if (this_present_directory || that_present_directory) {
      if (!(this_present_directory && that_present_directory))
        return false;
      if (this.directory != that.directory)
        return false;
    }

    boolean this_present_blocks = true && this.isSetBlocks();
    boolean that_present_blocks = true && that.isSetBlocks();
    if (this_present_blocks || that_present_blocks) {
      if (!(this_present_blocks && that_present_blocks))
        return false;
      if (!this.blocks.equals(that.blocks))
        return false;
    }

    boolean this_present_complete = true;
    boolean that_present_complete = true;
    if (this_present_complete || that_present_complete) {
      if (!(this_present_complete && that_present_complete))
        return false;
      if (this.complete != that.complete)
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FileMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullPath()).compareTo(other.isSetFullPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullPath, other.fullPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockSize()).compareTo(other.isSetBlockSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSize, other.blockSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreationTime()).compareTo(other.isSetCreationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creationTime, other.creationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirectory()).compareTo(other.isSetDirectory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirectory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.directory, other.directory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocks()).compareTo(other.isSetBlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocks, other.blocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComplete()).compareTo(other.isSetComplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complete, other.complete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileMeta(");
    boolean first = true;

    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullPath:");
    if (this.fullPath == null) {
      sb.append("null");
    } else {
      sb.append(this.fullPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockSize:");
    sb.append(this.blockSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creationTime:");
    sb.append(this.creationTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("directory:");
    sb.append(this.directory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocks:");
    if (this.blocks == null) {
      sb.append("null");
    } else {
      sb.append(this.blocks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("complete:");
    sb.append(this.complete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (owner != null) {
      owner.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileMetaStandardSchemeFactory implements SchemeFactory {
    public FileMetaStandardScheme getScheme() {
      return new FileMetaStandardScheme();
    }
  }

  private static class FileMetaStandardScheme extends StandardScheme<FileMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fileId = iprot.readI64();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FULL_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullPath = iprot.readString();
              struct.setFullPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fileSize = iprot.readI64();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BLOCK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blockSize = iprot.readI64();
              struct.setBlockSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creationTime = iprot.readI64();
              struct.setCreationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DIRECTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.directory = iprot.readBool();
              struct.setDirectoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.blocks = new ArrayList<BlockInfo>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  BlockInfo _elem10;
                  _elem10 = new BlockInfo();
                  _elem10.read(iprot);
                  struct.blocks.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setBlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.complete = iprot.readBool();
              struct.setCompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.owner = new User();
              struct.owner.read(iprot);
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI64(struct.fileId);
      oprot.writeFieldEnd();
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.fullPath != null) {
        oprot.writeFieldBegin(FULL_PATH_FIELD_DESC);
        oprot.writeString(struct.fullPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.fileSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_SIZE_FIELD_DESC);
      oprot.writeI64(struct.blockSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATION_TIME_FIELD_DESC);
      oprot.writeI64(struct.creationTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIRECTORY_FIELD_DESC);
      oprot.writeBool(struct.directory);
      oprot.writeFieldEnd();
      if (struct.blocks != null) {
        oprot.writeFieldBegin(BLOCKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.blocks.size()));
          for (BlockInfo _iter11 : struct.blocks)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPLETE_FIELD_DESC);
      oprot.writeBool(struct.complete);
      oprot.writeFieldEnd();
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        struct.owner.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileMetaTupleSchemeFactory implements SchemeFactory {
    public FileMetaTupleScheme getScheme() {
      return new FileMetaTupleScheme();
    }
  }

  private static class FileMetaTupleScheme extends TupleScheme<FileMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFileId()) {
        optionals.set(0);
      }
      if (struct.isSetFileName()) {
        optionals.set(1);
      }
      if (struct.isSetFullPath()) {
        optionals.set(2);
      }
      if (struct.isSetFileSize()) {
        optionals.set(3);
      }
      if (struct.isSetBlockSize()) {
        optionals.set(4);
      }
      if (struct.isSetCreationTime()) {
        optionals.set(5);
      }
      if (struct.isSetDirectory()) {
        optionals.set(6);
      }
      if (struct.isSetBlocks()) {
        optionals.set(7);
      }
      if (struct.isSetComplete()) {
        optionals.set(8);
      }
      if (struct.isSetOwner()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetFileId()) {
        oprot.writeI64(struct.fileId);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
      if (struct.isSetFullPath()) {
        oprot.writeString(struct.fullPath);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI64(struct.fileSize);
      }
      if (struct.isSetBlockSize()) {
        oprot.writeI64(struct.blockSize);
      }
      if (struct.isSetCreationTime()) {
        oprot.writeI64(struct.creationTime);
      }
      if (struct.isSetDirectory()) {
        oprot.writeBool(struct.directory);
      }
      if (struct.isSetBlocks()) {
        {
          oprot.writeI32(struct.blocks.size());
          for (BlockInfo _iter12 : struct.blocks)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetComplete()) {
        oprot.writeBool(struct.complete);
      }
      if (struct.isSetOwner()) {
        struct.owner.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.fileId = iprot.readI64();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fullPath = iprot.readString();
        struct.setFullPathIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileSize = iprot.readI64();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.blockSize = iprot.readI64();
        struct.setBlockSizeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.creationTime = iprot.readI64();
        struct.setCreationTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.directory = iprot.readBool();
        struct.setDirectoryIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.blocks = new ArrayList<BlockInfo>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            BlockInfo _elem15;
            _elem15 = new BlockInfo();
            _elem15.read(iprot);
            struct.blocks.add(_elem15);
          }
        }
        struct.setBlocksIsSet(true);
      }
      if (incoming.get(8)) {
        struct.complete = iprot.readBool();
        struct.setCompleteIsSet(true);
      }
      if (incoming.get(9)) {
        struct.owner = new User();
        struct.owner.read(iprot);
        struct.setOwnerIsSet(true);
      }
    }
  }

}

